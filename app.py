import streamlit as st
import boto3
from botocore.config import Config
import time
import json

# -----------------------------
# Config from Secrets (with fallback)
# -----------------------------
RATE_LIMIT = st.secrets.get("rate_limit", {}).get("max_requests", 6)
TIME_WINDOW = st.secrets.get("rate_limit", {}).get("time_window_seconds", 60)
BEDROCK_REGION = st.secrets.get("aws", {}).get("region", "us-east-1")


# -----------------------------
# Rate Limiting Setup (Per User)
# -----------------------------
def check_rate_limit():
    if "requests" not in st.session_state:
        st.session_state["requests"] = []

    now = time.time()
    st.session_state["requests"] = [
        ts for ts in st.session_state["requests"] if now - ts < TIME_WINDOW
    ]

    if len(st.session_state["requests"]) >= RATE_LIMIT:
        return False

    st.session_state["requests"].append(now)
    return True


# -----------------------------
# Bedrock Client Setup
# -----------------------------
bedrock_client = boto3.client(
    "bedrock-runtime",
    region_name=BEDROCK_REGION,
    config=Config(retries={"max_attempts": 3}),
)

# -----------------------------
# Streamlit App
# -----------------------------
st.set_page_config(page_title="AI Slogan Generator", page_icon="^_____^")
st.title("^_____^ AI Slogan Generator (Bedrock)")

st.markdown(
    """
Enter a product, idea, or service and get a **catchy slogan** generated by Amazon Bedrock.
"""
)

prompt = st.text_input("Enter your product/idea:")

if st.button("Generate Slogan"):
    if not prompt:
        st.error("Please enter a prompt!")
    elif not check_rate_limit():
        st.error(
            f"Rate limit exceeded. Max {RATE_LIMIT} requests per {TIME_WINDOW} sec."
        )
    else:
        try:
            response = bedrock_client.invoke_model(
                modelId="amazon.nova-lite-v1:0",
                contentType="application/json",
                body=json.dumps(
                    {
                        "messages": [
                            {
                                "role": "user",
                                "content": [
                                    {"text": f"Generate a catchy slogan for: {prompt}"}
                                ],
                            }
                        ],
                        "inferenceConfig": {"maxTokens": 60, "temperature": 0.8},
                    }
                ),
            )

            result_str = response["body"].read().decode("utf-8")
            result_json = json.loads(result_str)

            slogan = (
                (
                    result_json.get("output", {})
                    .get("message", {})
                    .get("content", [{}])[0]
                    .get("text", "No slogan generated")
                )
                .strip('"')
                .strip()
            )

            st.success("Slogan generated:")
            st.write(f"**{slogan}**")

        except Exception as e:
            st.error(f"Error generating slogan: {e}")


